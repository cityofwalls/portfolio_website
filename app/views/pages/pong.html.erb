<!DOCTYPE html>
<html>
  <head>
      
    <meta charset="UTF-8">
    <script language="javascript" type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.6.0/p5.min.js"></script>
    <script language="javascript" type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.6.0/addons/p5.dom.min.js"></script>
    
    <!-- ?v=1 forces refresh of js files on load. From: https://stackoverflow.com/questions/3951187/javascript-file-not-updating-no-matter-what-i-do -->
    <script type="text/javascript" src="/javascripts/lib/nn.js?v=1"></script>
    <script type="text/javascript" src="/javascripts/lib/matrix.js?v=1"></script>
    
    <script type="text/javascript" src="/javascripts/lib/sketch_pong.js?v=1"></script>
    <script type="text/javascript" src="/javascripts/lib/paddle.js?v=1"></script>
    <script type="text/javascript" src="/javascripts/lib/ball.js?v=2"></script>
    <script type="text/javascript" src="/javascripts/lib/ga_pong.js"></script>
    
    <title>Genetic Algorithm Project: Pong! | Jesse Battalino</title>
    
  </head>
  
  <body style='background-color:THISTLE'>
    
    <div id='jumbo-canvas' class='jumbotron text-center' style='margin: 0px 15px 10px 15px;'>
      
    <h1 style='color:DARKSLATEGRAY'>Training a Neural Network to play Pong using Reinforcement Learning and a Genetic Algorithm</h1>
    <hr />
     
      <p class='lead' style='color:SIENNA'>
        <strong>Each paddle represents an agent (with a Neural Network as its brain) and uses the input of its own position on the screen, as well as the ball's position on the screen to decide to move up, down, or stay still. The paddles are trained over the course of generations, each of which consist of 16 paddles, and each paddle plays against all other <code>n - 1 = 15</code> other paddles in the generation. Scoring is mostly what you might expect, if your opponent misses the ball when it comes to their side of the playfield, you get a point. However, I thought it would be important to reinforce reflection of the ball as well, so each successful return is worth <code>1/5</code> of a point. When all possible games of the generation are complete, we <u>sum up all the scores</u>, and assign each paddle a <u>fitness</u> as its <code>score / sum of all scores</code>. We then select the 3 paddles with the highest fitness values of their generation and, randomly, decide to either pick one of them at random to <code>copy()</code> into the next generation, or create a hybrid paddle made up of the DNA of 2 of these previous generation paddles. There is a 10% chance a mutation can occur to introduce some randomness as well, but either way the next generation of 16 is populated, and a new set of games begin. As of now, the color of the paddles will change slightly whenever a new generation is created to help the viewer follow the progression of the generations.</strong>
      </p>
      <hr />
      
      <button type='button' onclick='location.reload()'>Refresh</button>
      
    </div>
    
  </body>
  
</html>